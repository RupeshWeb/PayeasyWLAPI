//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<OtherChargeSetting> OtherChargeSettings { get; set; }
        public virtual DbSet<Scheme> Schemes { get; set; }
        public virtual DbSet<ActivityLog> ActivityLogs { get; set; }
        public virtual DbSet<AEPSATMRequest> AEPSATMRequests { get; set; }
        public virtual DbSet<AEPSFNOSession> AEPSFNOSessions { get; set; }
        public virtual DbSet<AEPSRequestLog> AEPSRequestLogs { get; set; }
        public virtual DbSet<AllBankName> AllBankNames { get; set; }
        public virtual DbSet<AmountWiseSwitching> AmountWiseSwitchings { get; set; }
        public virtual DbSet<Api> Apis { get; set; }
        public virtual DbSet<APIAmountSwitching> APIAmountSwitchings { get; set; }
        public virtual DbSet<APICommission> APICommissions { get; set; }
        public virtual DbSet<APIFailedReason> APIFailedReasons { get; set; }
        public virtual DbSet<Balance> Balances { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BankWithdrawal> BankWithdrawals { get; set; }
        public virtual DbSet<BBPSState> BBPSStates { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<ChargeMoneyTran> ChargeMoneyTrans { get; set; }
        public virtual DbSet<Circle> Circles { get; set; }
        public virtual DbSet<CircleAPISetting> CircleAPISettings { get; set; }
        public virtual DbSet<CircleSery> CircleSeries { get; set; }
        public virtual DbSet<ClientRequestLog> ClientRequestLogs { get; set; }
        public virtual DbSet<Commission> Commissions { get; set; }
        public virtual DbSet<ComplaintRegister> ComplaintRegisters { get; set; }
        public virtual DbSet<CustomAPICommission> CustomAPICommissions { get; set; }
        public virtual DbSet<DmtBalance> DmtBalances { get; set; }
        public virtual DbSet<ErrorTransaction> ErrorTransactions { get; set; }
        public virtual DbSet<FaildTransactionRetry> FaildTransactionRetries { get; set; }
        public virtual DbSet<FailSwitching> FailSwitchings { get; set; }
        public virtual DbSet<GCTransaction> GCTransactions { get; set; }
        public virtual DbSet<LapuBalance> LapuBalances { get; set; }
        public virtual DbSet<LapuMaster> LapuMasters { get; set; }
        public virtual DbSet<LapuMasterDetail> LapuMasterDetails { get; set; }
        public virtual DbSet<LoginHistory> LoginHistories { get; set; }
        public virtual DbSet<MasterIFSCCode> MasterIFSCCodes { get; set; }
        public virtual DbSet<MasterValidate> MasterValidates { get; set; }
        public virtual DbSet<MerchantActivation> MerchantActivations { get; set; }
        public virtual DbSet<MPOSTransaction> MPOSTransactions { get; set; }
        public virtual DbSet<NWalletOperatorCode> NWalletOperatorCodes { get; set; }
        public virtual DbSet<Operator> Operators { get; set; }
        public virtual DbSet<OperatorSwitching> OperatorSwitchings { get; set; }
        public virtual DbSet<OperatorValidateParam> OperatorValidateParams { get; set; }
        public virtual DbSet<PageAuthorization> PageAuthorizations { get; set; }
        public virtual DbSet<PageName> PageNames { get; set; }
        public virtual DbSet<PANTransactionRequest> PANTransactionRequests { get; set; }
        public virtual DbSet<PaymentRequest> PaymentRequests { get; set; }
        public virtual DbSet<RandomSwitch> RandomSwitches { get; set; }
        public virtual DbSet<RechargesPlan> RechargesPlans { get; set; }
        public virtual DbSet<RechargeTransaction> RechargeTransactions { get; set; }
        public virtual DbSet<Recipient> Recipients { get; set; }
        public virtual DbSet<Remitter> Remitters { get; set; }
        public virtual DbSet<Remittervalidate> Remittervalidates { get; set; }
        public virtual DbSet<RequestLog> RequestLogs { get; set; }
        public virtual DbSet<ResponsesLog> ResponsesLogs { get; set; }
        public virtual DbSet<SDKAuthRequestLog> SDKAuthRequestLogs { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServiceAuthorization> ServiceAuthorizations { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<SMSApi> SMSApis { get; set; }
        public virtual DbSet<SmsLog> SmsLogs { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<TransactionQueue> TransactionQueues { get; set; }
        public virtual DbSet<UserBank> UserBanks { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserSession> UserSessions { get; set; }
        public virtual DbSet<UserToken> UserTokens { get; set; }
        public virtual DbSet<ValidateParameter> ValidateParameters { get; set; }
        public virtual DbSet<ValidateParameterGrouping> ValidateParameterGroupings { get; set; }
    
        public virtual ObjectResult<Nullable<int>> AEPSCustomerTransactionupdate(Nullable<long> transactionID, string operatorRef, string aadharNo, string bankName, string custMobileNo, string fNOStatus, string txnLogs, ObjectParameter flag)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(long));
    
            var operatorRefParameter = operatorRef != null ?
                new ObjectParameter("OperatorRef", operatorRef) :
                new ObjectParameter("OperatorRef", typeof(string));
    
            var aadharNoParameter = aadharNo != null ?
                new ObjectParameter("aadharNo", aadharNo) :
                new ObjectParameter("aadharNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var custMobileNoParameter = custMobileNo != null ?
                new ObjectParameter("CustMobileNo", custMobileNo) :
                new ObjectParameter("CustMobileNo", typeof(string));
    
            var fNOStatusParameter = fNOStatus != null ?
                new ObjectParameter("FNOStatus", fNOStatus) :
                new ObjectParameter("FNOStatus", typeof(string));
    
            var txnLogsParameter = txnLogs != null ?
                new ObjectParameter("TxnLogs", txnLogs) :
                new ObjectParameter("TxnLogs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AEPSCustomerTransactionupdate", transactionIDParameter, operatorRefParameter, aadharNoParameter, bankNameParameter, custMobileNoParameter, fNOStatusParameter, txnLogsParameter, flag);
        }
    
        public virtual ObjectResult<AEPSLastTransaction_Result> AEPSLastTransaction(Nullable<int> userID, string agentID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var agentIDParameter = agentID != null ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AEPSLastTransaction_Result>("AEPSLastTransaction", userIDParameter, agentIDParameter);
        }
    
        public virtual ObjectResult<AEPSWLTransactions_Result> AEPSWLTransactions(Nullable<int> userID, string agentID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string number, Nullable<long> txnID, Nullable<short> flag)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var agentIDParameter = agentID != null ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var txnIDParameter = txnID.HasValue ?
                new ObjectParameter("TxnID", txnID) :
                new ObjectParameter("TxnID", typeof(long));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AEPSWLTransactions_Result>("AEPSWLTransactions", userIDParameter, agentIDParameter, fromDateParameter, toDateParameter, numberParameter, txnIDParameter, flagParameter);
        }
    
        public virtual ObjectResult<APaymentTransaction_Result> APaymentTransaction(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APaymentTransaction_Result>("APaymentTransaction", userIdParameter, fromDateParameter, toDateParameter, flag);
        }
    
        public virtual ObjectResult<APIAmountSwitch_Result> APIAmountSwitch(Nullable<int> operatorId, string amount, ObjectParameter outPut)
        {
            var operatorIdParameter = operatorId.HasValue ?
                new ObjectParameter("OperatorId", operatorId) :
                new ObjectParameter("OperatorId", typeof(int));
    
            var amountParameter = amount != null ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APIAmountSwitch_Result>("APIAmountSwitch", operatorIdParameter, amountParameter, outPut);
        }
    
        public virtual ObjectResult<Nullable<int>> APIAmtSwitch(Nullable<short> aPIID, Nullable<int> operatorId, ObjectParameter outPut)
        {
            var aPIIDParameter = aPIID.HasValue ?
                new ObjectParameter("APIID", aPIID) :
                new ObjectParameter("APIID", typeof(short));
    
            var operatorIdParameter = operatorId.HasValue ?
                new ObjectParameter("OperatorId", operatorId) :
                new ObjectParameter("OperatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("APIAmtSwitch", aPIIDParameter, operatorIdParameter, outPut);
        }
    
        public virtual ObjectResult<APIDetail_Result> APIDetail(Nullable<int> operatorId, Nullable<int> schemeId, Nullable<short> apiID, ObjectParameter outPut)
        {
            var operatorIdParameter = operatorId.HasValue ?
                new ObjectParameter("OperatorId", operatorId) :
                new ObjectParameter("OperatorId", typeof(int));
    
            var schemeIdParameter = schemeId.HasValue ?
                new ObjectParameter("SchemeId", schemeId) :
                new ObjectParameter("SchemeId", typeof(int));
    
            var apiIDParameter = apiID.HasValue ?
                new ObjectParameter("ApiID", apiID) :
                new ObjectParameter("ApiID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APIDetail_Result>("APIDetail", operatorIdParameter, schemeIdParameter, apiIDParameter, outPut);
        }
    
        public virtual int APIFailSwitch(Nullable<int> operatorID, Nullable<short> apiID, ObjectParameter outPut)
        {
            var operatorIDParameter = operatorID.HasValue ?
                new ObjectParameter("OperatorID", operatorID) :
                new ObjectParameter("OperatorID", typeof(int));
    
            var apiIDParameter = apiID.HasValue ?
                new ObjectParameter("ApiID", apiID) :
                new ObjectParameter("ApiID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APIFailSwitch", operatorIDParameter, apiIDParameter, outPut);
        }
    
        public virtual ObjectResult<APIReconciliation_Result> APIReconciliation(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter outPut)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APIReconciliation_Result>("APIReconciliation", fromDateParameter, toDateParameter, outPut);
        }
    
        public virtual ObjectResult<BalanceSummary_Result> BalanceSummary(Nullable<long> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter flag)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BalanceSummary_Result>("BalanceSummary", userIDParameter, fromDateParameter, toDateParameter, flag);
        }
    
        public virtual ObjectResult<BBPSCategory_Result> BBPSCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BBPSCategory_Result>("BBPSCategory");
        }
    
        public virtual ObjectResult<BBPSSUBCategory_Result> BBPSSUBCategory(Nullable<short> categoryID, Nullable<short> flag)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(short));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BBPSSUBCategory_Result>("BBPSSUBCategory", categoryIDParameter, flagParameter);
        }
    
        public virtual ObjectResult<BBPSSUBCategoryParameter_Result> BBPSSUBCategoryParameter(Nullable<int> billerD, Nullable<short> flag)
        {
            var billerDParameter = billerD.HasValue ?
                new ObjectParameter("BillerD", billerD) :
                new ObjectParameter("BillerD", typeof(int));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BBPSSUBCategoryParameter_Result>("BBPSSUBCategoryParameter", billerDParameter, flagParameter);
        }
    
        public virtual ObjectResult<BBPSSUBCategoryParameterGrouping_Result> BBPSSUBCategoryParameterGrouping(Nullable<int> billerID, Nullable<int> paramID, Nullable<short> flag)
        {
            var billerIDParameter = billerID.HasValue ?
                new ObjectParameter("BillerID", billerID) :
                new ObjectParameter("BillerID", typeof(int));
    
            var paramIDParameter = paramID.HasValue ?
                new ObjectParameter("ParamID", paramID) :
                new ObjectParameter("ParamID", typeof(int));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BBPSSUBCategoryParameterGrouping_Result>("BBPSSUBCategoryParameterGrouping", billerIDParameter, paramIDParameter, flagParameter);
        }
    
        public virtual ObjectResult<BBPSSWLTransactions_Result> BBPSSWLTransactions(Nullable<int> userID, string agentID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string number, Nullable<long> txnID, Nullable<short> flag)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var agentIDParameter = agentID != null ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var txnIDParameter = txnID.HasValue ?
                new ObjectParameter("TxnID", txnID) :
                new ObjectParameter("TxnID", typeof(long));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BBPSSWLTransactions_Result>("BBPSSWLTransactions", userIDParameter, agentIDParameter, fromDateParameter, toDateParameter, numberParameter, txnIDParameter, flagParameter);
        }
    
        public virtual ObjectResult<ChildRechargeTransaction_Result> ChildRechargeTransaction(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ChildRechargeTransaction_Result>("ChildRechargeTransaction", userIdParameter, fromDateParameter, toDateParameter, flag);
        }
    
        public virtual ObjectResult<CirclewiseapiSettings_Result> CirclewiseapiSettings(Nullable<long> noprefix, Nullable<int> operatorCode, ObjectParameter flag)
        {
            var noprefixParameter = noprefix.HasValue ?
                new ObjectParameter("Noprefix", noprefix) :
                new ObjectParameter("Noprefix", typeof(long));
    
            var operatorCodeParameter = operatorCode.HasValue ?
                new ObjectParameter("OperatorCode", operatorCode) :
                new ObjectParameter("OperatorCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CirclewiseapiSettings_Result>("CirclewiseapiSettings", noprefixParameter, operatorCodeParameter, flag);
        }
    
        public virtual ObjectResult<Nullable<int>> CustomerReprocTransactionupdate(Nullable<long> transactionID, string operatorRef, Nullable<short> aPIID, string aPIRef, string remarks, string apiReq, ObjectParameter flag)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(long));
    
            var operatorRefParameter = operatorRef != null ?
                new ObjectParameter("OperatorRef", operatorRef) :
                new ObjectParameter("OperatorRef", typeof(string));
    
            var aPIIDParameter = aPIID.HasValue ?
                new ObjectParameter("APIID", aPIID) :
                new ObjectParameter("APIID", typeof(short));
    
            var aPIRefParameter = aPIRef != null ?
                new ObjectParameter("APIRef", aPIRef) :
                new ObjectParameter("APIRef", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var apiReqParameter = apiReq != null ?
                new ObjectParameter("ApiReq", apiReq) :
                new ObjectParameter("ApiReq", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CustomerReprocTransactionupdate", transactionIDParameter, operatorRefParameter, aPIIDParameter, aPIRefParameter, remarksParameter, apiReqParameter, flag);
        }
    
        public virtual ObjectResult<CustomerStatementRef_Result> CustomerStatementRef(Nullable<long> userId, string transactionID, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerStatementRef_Result>("CustomerStatementRef", userIdParameter, transactionIDParameter, flag);
        }
    
        public virtual ObjectResult<CustomerTransactionRef_Result> CustomerTransactionRef(Nullable<long> userId, string transactionID, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var transactionIDParameter = transactionID != null ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerTransactionRef_Result>("CustomerTransactionRef", userIdParameter, transactionIDParameter, flag);
        }
    
        public virtual ObjectResult<Nullable<int>> CustomerTransactionupdate(Nullable<long> transactionID, string operatorRef, ObjectParameter flag)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(long));
    
            var operatorRefParameter = operatorRef != null ?
                new ObjectParameter("OperatorRef", operatorRef) :
                new ObjectParameter("OperatorRef", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CustomerTransactionupdate", transactionIDParameter, operatorRefParameter, flag);
        }
    
        public virtual ObjectResult<CustomerTransactionupdatetEST_Result> CustomerTransactionupdatetEST(Nullable<long> transactionID, string operatorRef, ObjectParameter flag)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(long));
    
            var operatorRefParameter = operatorRef != null ?
                new ObjectParameter("OperatorRef", operatorRef) :
                new ObjectParameter("OperatorRef", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerTransactionupdatetEST_Result>("CustomerTransactionupdatetEST", transactionIDParameter, operatorRefParameter, flag);
        }
    
        public virtual ObjectResult<Nullable<int>> CustomerTransactionValidate(Nullable<long> userID, string number, Nullable<decimal> amount, string refNumber)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(long));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var refNumberParameter = refNumber != null ?
                new ObjectParameter("refNumber", refNumber) :
                new ObjectParameter("refNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CustomerTransactionValidate", userIDParameter, numberParameter, amountParameter, refNumberParameter);
        }
    
        public virtual ObjectResult<DashBoardSalesTransaction_Result> DashBoardSalesTransaction(Nullable<long> userId, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DashBoardSalesTransaction_Result>("DashBoardSalesTransaction", userIdParameter, flag);
        }
    
        public virtual ObjectResult<DashBoardTransaction_Result> DashBoardTransaction(Nullable<long> userId, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DashBoardTransaction_Result>("DashBoardTransaction", userIdParameter, flag);
        }
    
        public virtual ObjectResult<DmtStatementReport_Result> DmtStatementReport(Nullable<int> userid, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DmtStatementReport_Result>("DmtStatementReport", useridParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<DmtTransactionLimitAPI_Result> DmtTransactionLimitAPI(string number, Nullable<short> apiID, Nullable<short> flag, Nullable<int> year)
        {
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var apiIDParameter = apiID.HasValue ?
                new ObjectParameter("ApiID", apiID) :
                new ObjectParameter("ApiID", typeof(short));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(short));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DmtTransactionLimitAPI_Result>("DmtTransactionLimitAPI", numberParameter, apiIDParameter, flagParameter, yearParameter);
        }
    
        public virtual ObjectResult<DmtTransactionsLimitsAPI_Result> DmtTransactionsLimitsAPI(Nullable<int> month, Nullable<int> year, Nullable<short> flag)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DmtTransactionsLimitsAPI_Result>("DmtTransactionsLimitsAPI", monthParameter, yearParameter, flagParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DodmtPayment(Nullable<int> creditUserId, Nullable<int> debitUserId, Nullable<decimal> amount, string paymentType, string remarks, string iP, Nullable<long> refrenceID, ObjectParameter output)
        {
            var creditUserIdParameter = creditUserId.HasValue ?
                new ObjectParameter("CreditUserId", creditUserId) :
                new ObjectParameter("CreditUserId", typeof(int));
    
            var debitUserIdParameter = debitUserId.HasValue ?
                new ObjectParameter("DebitUserId", debitUserId) :
                new ObjectParameter("DebitUserId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var refrenceIDParameter = refrenceID.HasValue ?
                new ObjectParameter("RefrenceID", refrenceID) :
                new ObjectParameter("RefrenceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DodmtPayment", creditUserIdParameter, debitUserIdParameter, amountParameter, paymentTypeParameter, remarksParameter, iPParameter, refrenceIDParameter, output);
        }
    
        public virtual ObjectResult<Nullable<int>> DowlPayment(Nullable<int> creditUserId, Nullable<int> debitUserId, Nullable<decimal> amount, string paymentType, string remarks, string iP, Nullable<long> refrenceID, ObjectParameter output)
        {
            var creditUserIdParameter = creditUserId.HasValue ?
                new ObjectParameter("CreditUserId", creditUserId) :
                new ObjectParameter("CreditUserId", typeof(int));
    
            var debitUserIdParameter = debitUserId.HasValue ?
                new ObjectParameter("DebitUserId", debitUserId) :
                new ObjectParameter("DebitUserId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var refrenceIDParameter = refrenceID.HasValue ?
                new ObjectParameter("RefrenceID", refrenceID) :
                new ObjectParameter("RefrenceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DowlPayment", creditUserIdParameter, debitUserIdParameter, amountParameter, paymentTypeParameter, remarksParameter, iPParameter, refrenceIDParameter, output);
        }
    
        public virtual ObjectResult<FindBankDetailsBy_Result> FindBankDetailsBy(string ifscCode, ObjectParameter flag)
        {
            var ifscCodeParameter = ifscCode != null ?
                new ObjectParameter("IfscCode", ifscCode) :
                new ObjectParameter("IfscCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindBankDetailsBy_Result>("FindBankDetailsBy", ifscCodeParameter, flag);
        }
    
        public virtual ObjectResult<getAdminChartRecharge_Result> getAdminChartRecharge(string from, string to)
        {
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAdminChartRecharge_Result>("getAdminChartRecharge", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<getAdminDashboard_Result> getAdminDashboard(Nullable<System.DateTime> dATEFROM, Nullable<System.DateTime> dATETO, Nullable<int> uSERID, Nullable<short> fLAG)
        {
            var dATEFROMParameter = dATEFROM.HasValue ?
                new ObjectParameter("DATEFROM", dATEFROM) :
                new ObjectParameter("DATEFROM", typeof(System.DateTime));
    
            var dATETOParameter = dATETO.HasValue ?
                new ObjectParameter("DATETO", dATETO) :
                new ObjectParameter("DATETO", typeof(System.DateTime));
    
            var uSERIDParameter = uSERID.HasValue ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(int));
    
            var fLAGParameter = fLAG.HasValue ?
                new ObjectParameter("FLAG", fLAG) :
                new ObjectParameter("FLAG", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAdminDashboard_Result>("getAdminDashboard", dATEFROMParameter, dATETOParameter, uSERIDParameter, fLAGParameter);
        }
    
        public virtual ObjectResult<getBalanceByID_Result> getBalanceByID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getBalanceByID_Result>("getBalanceByID", userIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerTransaction_Result> GetCustomerTransaction(Nullable<long> userID, string refNumber)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(long));
    
            var refNumberParameter = refNumber != null ?
                new ObjectParameter("refNumber", refNumber) :
                new ObjectParameter("refNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerTransaction_Result>("GetCustomerTransaction", userIDParameter, refNumberParameter);
        }
    
        public virtual ObjectResult<getDmtBalanceByID_Result> getDmtBalanceByID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDmtBalanceByID_Result>("getDmtBalanceByID", userIDParameter);
        }
    
        public virtual int getLatestRechargeForSameRequest(Nullable<int> userID, Nullable<int> operatorID, string number, Nullable<decimal> amount)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var operatorIDParameter = operatorID.HasValue ?
                new ObjectParameter("OperatorID", operatorID) :
                new ObjectParameter("OperatorID", typeof(int));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getLatestRechargeForSameRequest", userIDParameter, operatorIDParameter, numberParameter, amountParameter);
        }
    
        public virtual ObjectResult<getOperatorByOperatorID_Result> getOperatorByOperatorID(Nullable<int> operatorID)
        {
            var operatorIDParameter = operatorID.HasValue ?
                new ObjectParameter("OperatorID", operatorID) :
                new ObjectParameter("OperatorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getOperatorByOperatorID_Result>("getOperatorByOperatorID", operatorIDParameter);
        }
    
        public virtual ObjectResult<getUsageByID_Result> getUsageByID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUsageByID_Result>("getUsageByID", userIDParameter);
        }
    
        public virtual ObjectResult<getUserByID_Result> getUserByID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUserByID_Result>("getUserByID", userIDParameter);
        }
    
        public virtual ObjectResult<getUserByUserType_Result> getUserByUserType(string usertype)
        {
            var usertypeParameter = usertype != null ?
                new ObjectParameter("usertype", usertype) :
                new ObjectParameter("usertype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUserByUserType_Result>("getUserByUserType", usertypeParameter);
        }
    
        public virtual ObjectResult<LapuBalanceByID_Result> LapuBalanceByID(Nullable<int> userID, Nullable<int> lapuID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var lapuIDParameter = lapuID.HasValue ?
                new ObjectParameter("LapuID", lapuID) :
                new ObjectParameter("LapuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LapuBalanceByID_Result>("LapuBalanceByID", userIDParameter, lapuIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MposUpdatedTrans(Nullable<long> iD, Nullable<decimal> openingBal, Nullable<decimal> commPer, Nullable<decimal> commVal, Nullable<decimal> commAmt, Nullable<decimal> chargePer, Nullable<decimal> chargeVal, Nullable<decimal> chargeAmt, Nullable<decimal> cost, Nullable<decimal> closingBal, Nullable<decimal> chargeAmount, Nullable<decimal> commAount, string remark, string optID, string apiLog, Nullable<short> flag)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var openingBalParameter = openingBal.HasValue ?
                new ObjectParameter("OpeningBal", openingBal) :
                new ObjectParameter("OpeningBal", typeof(decimal));
    
            var commPerParameter = commPer.HasValue ?
                new ObjectParameter("CommPer", commPer) :
                new ObjectParameter("CommPer", typeof(decimal));
    
            var commValParameter = commVal.HasValue ?
                new ObjectParameter("CommVal", commVal) :
                new ObjectParameter("CommVal", typeof(decimal));
    
            var commAmtParameter = commAmt.HasValue ?
                new ObjectParameter("CommAmt", commAmt) :
                new ObjectParameter("CommAmt", typeof(decimal));
    
            var chargePerParameter = chargePer.HasValue ?
                new ObjectParameter("ChargePer", chargePer) :
                new ObjectParameter("ChargePer", typeof(decimal));
    
            var chargeValParameter = chargeVal.HasValue ?
                new ObjectParameter("ChargeVal", chargeVal) :
                new ObjectParameter("ChargeVal", typeof(decimal));
    
            var chargeAmtParameter = chargeAmt.HasValue ?
                new ObjectParameter("ChargeAmt", chargeAmt) :
                new ObjectParameter("ChargeAmt", typeof(decimal));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var closingBalParameter = closingBal.HasValue ?
                new ObjectParameter("ClosingBal", closingBal) :
                new ObjectParameter("ClosingBal", typeof(decimal));
    
            var chargeAmountParameter = chargeAmount.HasValue ?
                new ObjectParameter("ChargeAmount", chargeAmount) :
                new ObjectParameter("ChargeAmount", typeof(decimal));
    
            var commAountParameter = commAount.HasValue ?
                new ObjectParameter("CommAount", commAount) :
                new ObjectParameter("CommAount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var optIDParameter = optID != null ?
                new ObjectParameter("OptID", optID) :
                new ObjectParameter("OptID", typeof(string));
    
            var apiLogParameter = apiLog != null ?
                new ObjectParameter("ApiLog", apiLog) :
                new ObjectParameter("ApiLog", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MposUpdatedTrans", iDParameter, openingBalParameter, commPerParameter, commValParameter, commAmtParameter, chargePerParameter, chargeValParameter, chargeAmtParameter, costParameter, closingBalParameter, chargeAmountParameter, commAountParameter, remarkParameter, optIDParameter, apiLogParameter, flagParameter);
        }
    
        public virtual ObjectResult<MyCommission_Result> MyCommission(Nullable<int> userId, Nullable<int> schemeId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var schemeIdParameter = schemeId.HasValue ?
                new ObjectParameter("SchemeId", schemeId) :
                new ObjectParameter("SchemeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MyCommission_Result>("MyCommission", userIdParameter, schemeIdParameter);
        }
    
        public virtual ObjectResult<OperatorReconciliation_Result> OperatorReconciliation(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> operatorID, Nullable<short> aPIID, ObjectParameter outPut)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var operatorIDParameter = operatorID.HasValue ?
                new ObjectParameter("OperatorID", operatorID) :
                new ObjectParameter("OperatorID", typeof(int));
    
            var aPIIDParameter = aPIID.HasValue ?
                new ObjectParameter("APIID", aPIID) :
                new ObjectParameter("APIID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OperatorReconciliation_Result>("OperatorReconciliation", fromDateParameter, toDateParameter, operatorIDParameter, aPIIDParameter, outPut);
        }
    
        public virtual ObjectResult<OperatorReconciliationv2_Result> OperatorReconciliationv2(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> operatorID, Nullable<short> aPIID, Nullable<int> userID, Nullable<short> outPut)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var operatorIDParameter = operatorID.HasValue ?
                new ObjectParameter("OperatorID", operatorID) :
                new ObjectParameter("OperatorID", typeof(int));
    
            var aPIIDParameter = aPIID.HasValue ?
                new ObjectParameter("APIID", aPIID) :
                new ObjectParameter("APIID", typeof(short));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var outPutParameter = outPut.HasValue ?
                new ObjectParameter("OutPut", outPut) :
                new ObjectParameter("OutPut", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OperatorReconciliationv2_Result>("OperatorReconciliationv2", fromDateParameter, toDateParameter, operatorIDParameter, aPIIDParameter, userIDParameter, outPutParameter);
        }
    
        public virtual ObjectResult<PANWLTransactions_Result> PANWLTransactions(Nullable<int> userID, string agentID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string number, Nullable<long> txnID, Nullable<short> flag)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var agentIDParameter = agentID != null ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var txnIDParameter = txnID.HasValue ?
                new ObjectParameter("TxnID", txnID) :
                new ObjectParameter("TxnID", typeof(long));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PANWLTransactions_Result>("PANWLTransactions", userIDParameter, agentIDParameter, fromDateParameter, toDateParameter, numberParameter, txnIDParameter, flagParameter);
        }
    
        public virtual ObjectResult<RechargeLastTransaction_Result> RechargeLastTransaction(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechargeLastTransaction_Result>("RechargeLastTransaction", userIdParameter, fromDateParameter, toDateParameter, flag);
        }
    
        public virtual ObjectResult<RechargeLazyTransaction_Result> RechargeLazyTransaction(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> limit, string findData, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var findDataParameter = findData != null ?
                new ObjectParameter("FindData", findData) :
                new ObjectParameter("FindData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechargeLazyTransaction_Result>("RechargeLazyTransaction", userIdParameter, fromDateParameter, toDateParameter, limitParameter, findDataParameter, flag);
        }
    
        public virtual ObjectResult<RechargeTransaction_Result> RechargeTransaction(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechargeTransaction_Result>("RechargeTransaction", userIdParameter, fromDateParameter, toDateParameter, flag);
        }
    
        public virtual ObjectResult<RechargeTransactionBy_Result> RechargeTransactionBy(Nullable<long> userId, string number, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RechargeTransactionBy_Result>("RechargeTransactionBy", userIdParameter, numberParameter, flag);
        }
    
        public virtual ObjectResult<Recipientdetails_Result> Recipientdetails(string searchData, Nullable<long> remitterID, string extra, ObjectParameter flag)
        {
            var searchDataParameter = searchData != null ?
                new ObjectParameter("SearchData", searchData) :
                new ObjectParameter("SearchData", typeof(string));
    
            var remitterIDParameter = remitterID.HasValue ?
                new ObjectParameter("RemitterID", remitterID) :
                new ObjectParameter("RemitterID", typeof(long));
    
            var extraParameter = extra != null ?
                new ObjectParameter("Extra", extra) :
                new ObjectParameter("Extra", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Recipientdetails_Result>("Recipientdetails", searchDataParameter, remitterIDParameter, extraParameter, flag);
        }
    
        public virtual ObjectResult<Nullable<short>> Recipientupdetails(string searchData, Nullable<long> remitterID, string updateData, ObjectParameter flag)
        {
            var searchDataParameter = searchData != null ?
                new ObjectParameter("SearchData", searchData) :
                new ObjectParameter("SearchData", typeof(string));
    
            var remitterIDParameter = remitterID.HasValue ?
                new ObjectParameter("RemitterID", remitterID) :
                new ObjectParameter("RemitterID", typeof(long));
    
            var updateDataParameter = updateData != null ?
                new ObjectParameter("UpdateData", updateData) :
                new ObjectParameter("UpdateData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<short>>("Recipientupdetails", searchDataParameter, remitterIDParameter, updateDataParameter, flag);
        }
    
        public virtual ObjectResult<ReconciliationUserWise_Result> ReconciliationUserWise(Nullable<int> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<short> falg)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var falgParameter = falg.HasValue ?
                new ObjectParameter("Falg", falg) :
                new ObjectParameter("Falg", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReconciliationUserWise_Result>("ReconciliationUserWise", userIdParameter, fromDateParameter, toDateParameter, falgParameter);
        }
    
        public virtual ObjectResult<RefundLazyTransaction_Result> RefundLazyTransaction(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> limit, string findData, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var findDataParameter = findData != null ?
                new ObjectParameter("FindData", findData) :
                new ObjectParameter("FindData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RefundLazyTransaction_Result>("RefundLazyTransaction", userIdParameter, fromDateParameter, toDateParameter, limitParameter, findDataParameter, flag);
        }
    
        public virtual ObjectResult<RefundTransaction_Result> RefundTransaction(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RefundTransaction_Result>("RefundTransaction", userIdParameter, fromDateParameter, toDateParameter, flag);
        }
    
        public virtual ObjectResult<Remitterdetails_Result> Remitterdetails(string searchData, ObjectParameter flag)
        {
            var searchDataParameter = searchData != null ?
                new ObjectParameter("SearchData", searchData) :
                new ObjectParameter("SearchData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Remitterdetails_Result>("Remitterdetails", searchDataParameter, flag);
        }
    
        public virtual ObjectResult<ServicesbyTransaction_Result> ServicesbyTransaction(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ServicesbyTransaction_Result>("ServicesbyTransaction", userIdParameter, fromDateParameter, toDateParameter, flag);
        }
    
        public virtual ObjectResult<SPUserNameByType_Result> SPUserNameByType(string userType, Nullable<short> flag)
        {
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPUserNameByType_Result>("SPUserNameByType", userTypeParameter, flagParameter);
        }
    
        public virtual ObjectResult<TransactionCommission_Result> TransactionCommission(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionCommission_Result>("TransactionCommission", userIdParameter, fromDateParameter, toDateParameter, flag);
        }
    
        public virtual ObjectResult<TransactionLastStatement_Result> TransactionLastStatement(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionLastStatement_Result>("TransactionLastStatement", userIdParameter, fromDateParameter, toDateParameter, flag);
        }
    
        public virtual ObjectResult<TransactionLazyStatement_Result> TransactionLazyStatement(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> limit, string findData, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var limitParameter = limit.HasValue ?
                new ObjectParameter("Limit", limit) :
                new ObjectParameter("Limit", typeof(int));
    
            var findDataParameter = findData != null ?
                new ObjectParameter("FindData", findData) :
                new ObjectParameter("FindData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionLazyStatement_Result>("TransactionLazyStatement", userIdParameter, fromDateParameter, toDateParameter, limitParameter, findDataParameter, flag);
        }
    
        public virtual ObjectResult<Nullable<int>> TransactionLimit(Nullable<int> userID, Nullable<decimal> amount, Nullable<short> flag)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TransactionLimit", userIDParameter, amountParameter, flagParameter);
        }
    
        public virtual ObjectResult<TransactionProcessTime_Result> TransactionProcessTime(Nullable<int> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionProcessTime_Result>("TransactionProcessTime", userIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> TransactionsProcessTime(Nullable<int> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> operatorId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var operatorIdParameter = operatorId.HasValue ?
                new ObjectParameter("OperatorId", operatorId) :
                new ObjectParameter("OperatorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("TransactionsProcessTime", userIdParameter, fromDateParameter, toDateParameter, operatorIdParameter);
        }
    
        public virtual ObjectResult<TransactionStatement_Result> TransactionStatement(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionStatement_Result>("TransactionStatement", userIdParameter, fromDateParameter, toDateParameter, flag);
        }
    
        public virtual ObjectResult<TransactionSummary_Result> TransactionSummary(Nullable<long> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter flag)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionSummary_Result>("TransactionSummary", userIdParameter, fromDateParameter, toDateParameter, flag);
        }
    
        public virtual ObjectResult<UserGSTTDSSummary_Result> UserGSTTDSSummary(Nullable<int> year, Nullable<int> month, Nullable<int> userID)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGSTTDSSummary_Result>("UserGSTTDSSummary", yearParameter, monthParameter, userIDParameter);
        }
    
        public virtual ObjectResult<UserUsageDetails_Result> UserUsageDetails(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, ObjectParameter output)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserUsageDetails_Result>("UserUsageDetails", fromDateParameter, toDateParameter, output);
        }
    }
}
