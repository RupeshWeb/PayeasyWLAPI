<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BenenotVerify" xml:space="preserve">
    <value>Recipient is not verified.</value>
  </data>
  <data name="Errorsm" xml:space="preserve">
    <value>Something went wrong, contact to administrator.</value>
  </data>
  <data name="Failed" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="InvalidBene" xml:space="preserve">
    <value>Invalid recipient Id.</value>
  </data>
  <data name="InvalidIfsc" xml:space="preserve">
    <value>Invalid ifsc code.</value>
  </data>
  <data name="InvalidOtp" xml:space="preserve">
    <value>Invalid otp.</value>
  </data>
  <data name="OtpExpired" xml:space="preserve">
    <value>OTP is expired.</value>
  </data>
  <data name="OTPSend" xml:space="preserve">
    <value>OTP sent on mobile number.</value>
  </data>
  <data name="SenderExist" xml:space="preserve">
    <value>Sender mobile number already exist.</value>
  </data>
  <data name="Ticketexist" xml:space="preserve">
    <value>Ticket already exist.</value>
  </data>
  <data name="Fd" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="Pd" xml:space="preserve">
    <value>Pending</value>
  </data>
  <data name="Su" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="TxnSu" xml:space="preserve">
    <value>Transaction success.</value>
  </data>
  <data name="Block" xml:space="preserve">
    <value>Something went wrong from operator end.</value>
  </data>
  <data name="InvalidRemitterId" xml:space="preserve">
    <value>Invalid rimitter Id.</value>
  </data>
  <data name="remitteradded" xml:space="preserve">
    <value>Remitter added successfully.</value>
  </data>
  <data name="Remitternotexist" xml:space="preserve">
    <value>Remitter mobile number not exist.</value>
  </data>
  <data name="DeleRpnt" xml:space="preserve">
    <value>Recipient deleted successfully.</value>
  </data>
  <data name="Rpntverifysu" xml:space="preserve">
    <value>Recipient verifyed successfully.</value>
  </data>
  <data name="Limit" xml:space="preserve">
    <value>Your limit is reached.</value>
  </data>
  <data name="InvalidOurcode" xml:space="preserve">
    <value>Invalid OurCode.</value>
  </data>
  <data name="Datanotfound" xml:space="preserve">
    <value>Data Not Found</value>
    <comment>not data</comment>
  </data>
  <data name="InifscFromat" xml:space="preserve">
    <value>Invalid IFSC Format.</value>
  </data>
  <data name="InvalidMsg" xml:space="preserve">
    <value>Invalid Message.</value>
  </data>
  <data name="ServiceNotAuth" xml:space="preserve">
    <value>You are not authorized to use this service Contact Administrator.</value>
    <comment>You are not authorized to use this service Contact Administrator.</comment>
  </data>
  <data name="RecipientAddSu" xml:space="preserve">
    <value>Recipient added successfully.</value>
    <comment>Recipient added successfully.</comment>
  </data>
  <data name="InvalidAcFormat" xml:space="preserve">
    <value>Invalid account number format.</value>
    <comment>bank account number length and fromat validate.</comment>
  </data>
  <data name="RecipientNameLength" xml:space="preserve">
    <value>Recipient name should be min. 5 letter.</value>
    <comment>recipient name min length limit</comment>
  </data>
  <data name="SenderNameLength" xml:space="preserve">
    <value>Remitter name should be min. 5 letter.</value>
    <comment>sender name min length limit</comment>
  </data>
  <data name="InvalidMNofrmt" xml:space="preserve">
    <value>Invalid mobile number format.</value>
    <comment>mobile number format only no accepted</comment>
  </data>
  <data name="InvalidNamefrmt" xml:space="preserve">
    <value>Invalid name format.</value>
    <comment>remitter name format only alphabets accepted</comment>
  </data>
  <data name="TxnPending" xml:space="preserve">
    <value>Transaction is pending mode.</value>
    <comment>txn pending</comment>
  </data>
  <data name="InvalidTxnID" xml:space="preserve">
    <value>Invalid transaction ID.</value>
  </data>
  <data name="ServiceDown" xml:space="preserve">
    <value>Service is temporary down.</value>
    <comment>service down.</comment>
  </data>
  <data name="RecipientExist" xml:space="preserve">
    <value>Recipient Id is already present.</value>
    <comment>Recipient Id is already present.</comment>
  </data>
  <data name="TxnNtPending" xml:space="preserve">
    <value>Transaction is not pending mode.</value>
    <comment>Transaction is not pending mode.</comment>
  </data>
  <data name="TxnNotFound" xml:space="preserve">
    <value>Transaction not found.</value>
    <comment>Transaction not found.</comment>
  </data>
  <data name="Txnsuccess" xml:space="preserve">
    <value>Transaction Successful.</value>
    <comment>Transaction Successful.</comment>
  </data>
  <data name="Unknownresponse" xml:space="preserve">
    <value>Unknown response.</value>
    <comment>Unknownresponse</comment>
  </data>
  <data name="TxnAlreadyexist" xml:space="preserve">
    <value>Transaction ref already exist.</value>
    <comment>Transaction ref already exist.</comment>
  </data>
  <data name="TxnAmountAlredycredit" xml:space="preserve">
    <value>The transaction amount was already credited to your wallet.</value>
    <comment>The transaction amount was already credited to your wallet.</comment>
  </data>
  <data name="Mobilenoexist" xml:space="preserve">
    <value>The mobile number already exists. Try with another mobile number.</value>
    <comment>The mobile number already exists. Try with another mobile number.</comment>
  </data>
  <data name="RequestAccpted" xml:space="preserve">
    <value>Request accepted successfully.</value>
    <comment>Request accepted successfully.</comment>
  </data>
  <data name="NoPlanFound" xml:space="preserve">
    <value>No Plans Found with this Amount.</value>
    <comment>No Plans Found with this Amount</comment>
  </data>
  <data name="TxnStatusCheckBlock" xml:space="preserve">
    <value>When done the transaction then you can check the transaction status after 5 minutes.</value>
    <comment>When done the transaction then you can check the transaction status after 5 minutes.</comment>
  </data>
  <data name="TriggerCallSu" xml:space="preserve">
    <value>The trigger called successfully.</value>
    <comment>The trigger called successfully.</comment>
  </data>
  <data name="InavlidToken" xml:space="preserve">
    <value>Invalid token.</value>
    <comment>Invalid token.</comment>
  </data>
  <data name="InvalidIP" xml:space="preserve">
    <value>Invalid IP Address.</value>
    <comment>Invalid IP Address</comment>
  </data>
  <data name="InvalidUser" xml:space="preserve">
    <value>Invalid user.</value>
    <comment>Invalid user.</comment>
  </data>
  <data name="TokenExpired" xml:space="preserve">
    <value>Your token is expired.</value>
    <comment>Your token is expired.</comment>
  </data>
  <data name="Youracsuspend" xml:space="preserve">
    <value>Your account is suspended.</value>
    <comment>Your account is suspended.</comment>
  </data>
</root>